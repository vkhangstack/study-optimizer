import { Assignment, PrismaClient } from "@prisma/client"
import { Direction as PrismaDirection } from "@prisma/client"
import { UserService } from "./userService"
import { MessageType, MessageDirection, commandList, Command, AssignmentStatus } from "../types/enums"
import { logger } from "../utils/logger"
import { ZaloBotWebhookMessage, ZaloBotWebhookMessagePhoto, ZaloBotWebhookMessageSticker, ZaloBotWebhookMessageText } from "../types"
import { BotUtils } from "../utils/bot"
import { ZaloBotService } from "./zaloBotService"
import BOT_RESPONSES from "../types/message"
import { ClassService } from "./classService"
import { DateUtils } from "../utils/date"
import { AssignmentService } from "./assignmentService"
import { sleep } from "bun"

const prisma = new PrismaClient()

export interface CreateMessageData {
  zaloId: string
  content?: string
  type: MessageType
  direction: MessageDirection
  timestamp: Date
  chatId?: string
}

export class MessageService {
  private userService: UserService
  private zaloBotService: ZaloBotService
  private classService: ClassService
  private assignmentService: AssignmentService

  constructor() {
    this.userService = UserService.getInstance()
    this.zaloBotService = ZaloBotService.getInstance()
    this.classService = ClassService.getInstance()
    this.assignmentService = AssignmentService.getInstance()
  }

  async saveMessage(data: CreateMessageData) {
    try {
      // Ensure user exists
      const user = await this.userService.findOrCreateUser(data.zaloId)

      const message = await prisma.message.create({
        data: {
          userId: user.id,
          content: data.content,
          chatId: data.chatId, // Using chatId from the input data
          type: data.type as MessageType,
          direction: data.direction as MessageDirection,
          timestamp: data.timestamp,
        },
        include: {
          user: true,
        },
      })

      return message
    } catch (error) {
      console.error("Error saving message:", error)
      throw error
    }
  }

  async getMessagesByUser(zaloId: string, page: number = 1, limit: number = 50) {
    try {
      const user = await this.userService.findUserByZaloId(zaloId)
      if (!user) {
        return { messages: [], total: 0, page, limit }
      }

      const skip = (page - 1) * limit

      const [messages, total] = await Promise.all([
        prisma.message.findMany({
          where: { userId: user.id },
          orderBy: { timestamp: "desc" },
          skip,
          take: limit,
          include: {
            user: true,
          },
        }),
        prisma.message.count({
          where: { userId: user.id },
        }),
      ])

      return {
        messages,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      }
    } catch (error) {
      console.error("Error getting messages by user:", error)
      throw error
    }
  }

  async getMessagesByConversation(conversationId: string, page: number = 1, limit: number = 50) {
    try {
      // For now, we'll use conversationId as zaloId
      // In a more complex setup, you'd have a proper conversation mapping
      return this.getMessagesByUser(conversationId, page, limit)
    } catch (error) {
      console.error("Error getting messages by conversation:", error)
      throw error
    }
  }

  async getRecentMessages(limit: number = 100) {
    try {
      const messages = await prisma.message.findMany({
        orderBy: { timestamp: "desc" },
        take: limit,
        include: {
          user: true,
        },
      })

      return messages
    } catch (error) {
      console.error("Error getting recent messages:", error)
      throw error
    }
  }

  async getMessageStats(zaloId?: string) {
    try {
      const whereClause = zaloId ? { user: { zaloId } } : {}

      const [totalMessages, incomingCount, outgoingCount] = await Promise.all([
        prisma.message.count({ where: whereClause }),
        prisma.message.count({
          where: {
            ...whereClause,
            direction: MessageDirection.INCOMING as PrismaDirection,
          },
        }),
        prisma.message.count({
          where: {
            ...whereClause,
            direction: MessageDirection.OUTGOING as PrismaDirection,
          },
        }),
      ])

      return {
        total: totalMessages,
        incoming: incomingCount,
        outgoing: outgoingCount,
      }
    } catch (error) {
      console.error("Error getting message stats:", error)
      throw error
    }
  }

  async deleteOldMessages(daysOld: number = 30) {
    try {
      const cutoffDate = new Date()
      cutoffDate.setDate(cutoffDate.getDate() - daysOld)

      const result = await prisma.message.deleteMany({
        where: {
          timestamp: {
            lt: cutoffDate,
          },
        },
      })

      return result.count
    } catch (error) {
      console.error("Error deleting old messages:", error)
      throw error
    }
  }

  async processMessage(msg: ZaloBotWebhookMessage): Promise<{
    response: boolean
    message: string
    chatId: string
  }> {
    try {
      logger.info("Received message:", msg)
      const chatId = msg.chat.id
      const userId = msg.from.id
      const userName = ""
      let response = ""

      logger.info("Received message:", {
        ...msg,
      })

      const result = {
        response: false,
        message: "",
        chatId: chatId,
      }

      switch (msg.message_type) {
        case MessageType.CHAT_STICKER:
          const webhookDataSticker = msg as ZaloBotWebhookMessageSticker
          const arrayMessageSticker = [
            "üòò Sticker d·ªÖ th∆∞∆°ng qu√°!",
            "üòò C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i sticker!",
            "üòò Sticker n√†y th·∫≠t vui nh·ªôn!",
            "üòò M√¨nh r·∫•t th√≠ch sticker b·∫°n g·ª≠i!",
            "üòò Sticker si√™u d·ªÖ th∆∞∆°ng lu√¥n!",
            "üòò C·∫£m ∆°n b·∫°n ƒë√£ l√†m cho ng√†y c·ªßa m√¨nh th√™m vui v·ªõi sticker n√†y!",
            "üòò Sticker n√†y th·∫≠t s·ª± r·∫•t ƒë·∫∑c bi·ªát!",
            "üòò M√¨nh kh√¥ng th·ªÉ ng·ª´ng c∆∞·ªùi v·ªõi sticker b·∫°n g·ª≠i!",
            "üòò Sticker n√†y l√†m m√¨nh nh·ªõ ƒë·∫øn m·ªôt k·ª∑ ni·ªám vui!",
            "üòò B·∫°n c√≥ th·ªÉ g·ª≠i th√™m sticker n·ªØa kh√¥ng? M√¨nh r·∫•t th√≠ch ch√∫ng!",
            "üòò Sticker n√†y th·∫≠t s·ª± l√†m m√¨nh c·∫£m th·∫•y tuy·ªát v·ªùi!",
            "üòò C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª sticker n√†y v·ªõi m√¨nh!",
          ]

          await this.saveMessage({
            zaloId: userId,
            content: `Sticker ID: ${webhookDataSticker.sticker}`,
            type: MessageType.CHAT_STICKER,
            chatId: chatId,
            direction: MessageDirection.INCOMING,
            timestamp: new Date(),
          })

          // Simple response like your example
          // response = `Ch√†o b·∫°n ${userName}, b·∫°n v·ª´a g·ª≠i m·ªôt sticker d·ªÖ th∆∞∆°ng! üòä`;
          response = arrayMessageSticker[Math.floor(Math.random() * arrayMessageSticker.length)]

          // Save outgoing message
          await this.saveMessage({
            zaloId: userId,
            content: response,
            chatId: chatId,
            type: MessageType.CHAT_STICKER,
            direction: MessageDirection.OUTGOING,
            timestamp: new Date(),
          })

          result.response = true
          result.message = response
          break

        case MessageType.CHAT_PHOTO:
          const webhookDataPhoto = msg as ZaloBotWebhookMessagePhoto
          await this.saveMessage({
            zaloId: userId,
            content: `Photo URL: ${webhookDataPhoto.photo_url}`,
            type: MessageType.CHAT_PHOTO,
            chatId: chatId,
            direction: MessageDirection.INCOMING,
            timestamp: new Date(),
          })

          // Simple response like your example
          response = `Ch√†o b·∫°n ${userName}, b·∫°n v·ª´a g·ª≠i m·ªôt b·ª©c ·∫£nh d·ªÖ th∆∞∆°ng! üòä`

          // Save outgoing message
          await this.saveMessage({
            zaloId: userId,
            content: response,
            chatId: chatId,
            type: MessageType.CHAT_PHOTO,
            direction: MessageDirection.OUTGOING,
            timestamp: new Date(),
          })
          result.response = true
          result.message = response
          break

        default:
          const webhookDataText = msg as ZaloBotWebhookMessageText

          await this.zaloBotService.sendTypingAction(userId)

          await sleep(1000) // Simulate typing delay

          await this.saveMessage({
            zaloId: userId,
            content: `Message: ${webhookDataText.text}`,
            type: MessageType.TEXT,
            chatId: chatId,
            direction: MessageDirection.INCOMING,
            timestamp: new Date(),
          })

          const data = await this.processMessageText(webhookDataText)
          result.response = data.response
          result.message = data.message
          result.chatId = data.chatId
          break
      }

      return result
    } catch (error) {
      console.error("Error processing message:", error)
      throw error
    }
  }

  async processMessageText(msg: ZaloBotWebhookMessageText): Promise<{
    response: boolean
    message: string
    chatId: string
  }> {
    try {
      logger.info("Processing message:", msg)
      const { userId, chatId, messageText, userName } = BotUtils.getInstance().parseCommand(msg) || {}

      let messageType = MessageType.TEXT

      logger.info("Received message:", {
        ...msg,
      })

      const result = {
        response: false,
        message: "",
        chatId: chatId,
      }
      const checkUserRegistration = await this.handleMessageUserRegistration(userId)

      switch (true) {
        case messageText.startsWith(Command.HELP):
          logger.info("Processing /help command for user:", userId)
          result.message = this.zaloBotService.getHelpMessage()
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.MENU):
          logger.info("Processing /menu command for user:", userId)
          logger.debug("Processing /menu after :", msg.text?.split(" ").slice(1).join(" "))
          const menuMessage = BOT_RESPONSES.menu.text + "\n" + BOT_RESPONSES.menu.buttons.map((btn) => `${btn.text} - ${btn.command}`).join("\n")
          result.message = menuMessage
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.INFO):
          logger.info("Processing /info command for user:", userId)
          result.message = this.zaloBotService.getBotInformation()
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.CLASS):
          logger.info("Processing /class command for user:", userId)
          if (!checkUserRegistration.ok) {
            result.message = checkUserRegistration.message
            break
          }

          result.response = true
          messageType = MessageType.TEMPLATE

          const classes = await this.classService.getClassByZaloId(userId)
          const classSubject = await this.classService.getClassSubjectMap(userId)
          // Process classes as needed
          logger.info("Classes retrieved:", classes)
          if (classes.length === 0) {
            result.message =
              "B·∫°n ch∆∞a ƒëƒÉng k√Ω l·ªõp h·ªçc n√†o. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /register ƒë·ªÉ ƒëƒÉng k√Ω l·ªõp h·ªçc ho·∫∑c li√™n h·ªá v·ªõi admin ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt. üòä"
            result.response = true
            break
          }

          const classSubjectId: any = messageText.replace(Command.CLASS, "").trim()

          if (classSubjectId) {
            const classInfo = classes.find((cls) => cls.subjectId.startsWith(classSubjectId) || classSubject[cls.id]?.subjectName === classSubjectId)
            if (!classInfo) {
              result.message = "‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi m√£: " + classSubjectId
              break
            } else {
              result.message = `üìö L·ªõp h·ªçc c·ªßa b·∫°n:\n ‚Ä¢ M√£: ${classInfo?.subjectName}\n‚Ä¢ M√¥n: ${classInfo?.subjectId}\n‚Ä¢ Gi·∫£ng vi√™n: ${
                classInfo?.teacher
              }\n‚Ä¢ Th·ªùi gian: ${classInfo?.startTime} ƒë·∫øn ${classInfo?.endTime} ${DateUtils.getInstance().getDayOfWeekText(
                classInfo?.dayOfWeek
              )}\n${Array.from({ length: 50 })
                .map(() => "-")
                .join("")}`
            }
          } else {
            let responseMsgClass = `üìö L·ªõp h·ªçc c·ªßa b·∫°n:\n${classes
              .map(
                (cls) =>
                  `‚Ä¢ M√£: ${classSubject[cls.id]?.subjectName}\n‚Ä¢ M√¥n: ${cls.subjectId}\n‚Ä¢ Gi·∫£ng vi√™n: ${cls.teacher}\n‚Ä¢ Th·ªùi gian: ${
                    cls.startTime
                  } ƒë·∫øn ${cls.endTime} ${DateUtils.getInstance().getDayOfWeekText(cls.dayOfWeek)}\n${Array.from({ length: 50 })
                    .map(() => "-")
                    .join("")}`
              )
              .join("\n")}`

            result.message = responseMsgClass
          }
          result.message += "\nCh√∫c b·∫°n m·ªôt tu·∫ßn h·ªçc t·∫≠p hi·ªáu qu·∫£! üéâ"

          break

        case messageText.startsWith(Command.TODAY):
          logger.info("Processing /today command for user:", userId)
          messageType = MessageType.TEMPLATE
          result.response = true

          if (!checkUserRegistration.ok) {
            result.message = checkUserRegistration.message
            break
          }

          const calendarSubjectToday = await this.userService.getCalendarSubjectTodayForUser(userId)
          result.message = calendarSubjectToday.message
          break

        case messageText.startsWith(Command.REGISTER):
          logger.info("Processing /register command for user:", userId)

          let responseMsgRegister = ""
          const userExistRegister = await this.userService.findUserByZaloId(userId, true)
          if (!userExistRegister) {
            // Save user and message to database
            const newUser = await this.userService.findOrCreateUser(userId, {
              user_id: userId,
              display_name: userName,
            })
            await this.userService.activateUser(newUser.zaloId)
            await this.userService.toggleUserNotify(newUser.zaloId, true)
            // initialize class registration process
            const mainClasses = await this.classService.getAllMainClasses()
            logger.info("Main classes retrieved for registration:", mainClasses)
            // Here you would normally send the list of classes to the user for selection
            // For simplicity, we will just log them
            logger.info(`User ${userId} can register for the following classes:`, mainClasses)
            await this.classService.setClassForUser(
              userId,
              mainClasses.map((c) => c.id)
            )
            logger.info(
              `User ${userId} has been registered for classes:`,
              mainClasses.map((c) => c.id)
            )
            responseMsgRegister =
              BOT_RESPONSES.register.success +
              "\n\n" +
              `üéä B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω v√†o c√°c l·ªõp h·ªçc. S·ª≠ d·ª•ng l·ªánh /class ƒë·ªÉ xem chi ti·∫øt l·ªõp h·ªçc c·ªßa b·∫°n. Ho·∫∑c c√≥ th·ªÉ li√™n h·ªá v·ªõi admin ƒë·ªÉ thay ƒë·ªïi l·ªõp h·ªçc nh√©!`
          } else {
            responseMsgRegister = BOT_RESPONSES.register.alreadyRegistered
          }
          result.message = responseMsgRegister
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.UNREGISTER):
          logger.info("Processing /unregister command for user:", userId)
          const userExistUnregister = await this.userService.findUserByZaloId(userId, true)
          let responseMsgUnregister = ""
          if (!userExistUnregister) {
            responseMsgUnregister = BOT_RESPONSES.unregister.notRegistered
          } else {
            responseMsgUnregister = BOT_RESPONSES.unregister.success
            await this.userService.updateUser(userId, {
              active: false,
              notify: false,
            })
          }

          result.message = responseMsgUnregister
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.ASSIGNMENTS):
          logger.info("Processing /assignments command for user:", userId)
          const assignments = await this.assignmentService.getUserAssignments(userId)
          if (assignments.length === 0) {
            result.message = "B·∫°n ch∆∞a c√≥ b√†i t·∫≠p n√†o."
          } else {
            const classSubject = await this.classService.getClassSubjectMap(userId)
            result.message =
              "ü´£ Danh s√°ch b√†i t·∫≠p c·ªßa b·∫°n:\n" +
              assignments
                .map(
                  (a) =>
                    `‚Ä¢ B√†i t·∫≠p: ${a.assignment?.name}\n‚Ä¢ M√£: ${a?.id}\n‚Ä¢ H·∫°n n·ªôp: ${DateUtils.getInstance().formatDate(
                      a.assignment?.deadline
                    )}\n‚Ä¢ M√¥n: ${
                      a.assignment?.classSubjectId ? classSubject[a.assignment?.classSubjectId]?.subjectName : "Kh√¥ng x√°c ƒë·ªãnh"
                    }\n‚Ä¢ Ho√†n th√†nh: ${a.status === AssignmentStatus.COMPLETED ? "‚úÖ" : "‚ùå"}\n${
                      a.assignment?.description ? "‚Ä¢ M√¥ t·∫£: " + a.assignment?.description + "\n" : ""
                    }${Array.from({ length: 50 })
                      .map(() => "-")
                      .join("")}`
                )
                .join("\n") +
              "\nH√£y c·ªë g·∫Øng ho√†n th√†nh ƒë√∫ng h·∫°n nh√©! üòä"
          }
          result.response = true
          messageType = MessageType.TEMPLATE
          break
        case messageText.startsWith(Command.ADD_ASSIGNMENT_CLASS):
          logger.info("Processing /add_assignment_class command for user:", userId)
          // check Khang Pham
          if (userId !== "a0a56bb30efde7a3beec" || userName !== "Khang Pham") {
            result.message = "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y."
            result.response = true
            break
          }

          let assignmentDetails: any = messageText.replace(Command.ADD_ASSIGNMENT_CLASS, "").trim()
          assignmentDetails = JSON.parse(assignmentDetails)
          const classSubjectInfo = await this.classService.getClassSubjectBySubjectLikeId(assignmentDetails.classSubjectId)
          if (!classSubjectInfo) {
            result.message = `Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc v·ªõi m√£ ho·∫∑c t√™n ch·ª©a: ${assignmentDetails.classSubjectId}. Vui l√≤ng ki·ªÉm tra l·∫°i.`
            result.response = true
            break
          }

          if (!assignmentDetails?.classSubjectId || !assignmentDetails?.name || !assignmentDetails?.deadline) {
            result.message =
              "C√∫ ph√°p th√™m b√†i t·∫≠p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: /add_assignment_class {'name': 'T√™n b√†i t·∫≠p','classSubjectId': 'M√£ l·ªõp','deadline': 'YYYY-MM-DD HH:MM'}"
          } else {
            const deadlineDate = new Date(assignmentDetails?.deadline)
            if (isNaN(deadlineDate.getTime())) {
              result.message = "ƒê·ªãnh d·∫°ng ng√†y th√°ng kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: YYYY-MM-DD HH:MM"
            } else {
              const subject = await this.classService.getClassSubjectBySubjectId(classSubjectInfo.id)

              const existingAssignments = await this.assignmentService.getAssignmentByClassSubjectId(classSubjectInfo.id)
              const duplicate = existingAssignments.find(
                (a) => a.name === assignmentDetails.name && DateUtils.getInstance().isSameDay(a.deadline, deadlineDate)
              )
              if (duplicate) {
                result.message = `B√†i t·∫≠p v·ªõi t√™n "${assignmentDetails.name}" thu·ªôc m√¥n ${
                  classSubjectInfo?.subjectName
                } v√† h·∫°n n·ªôp v√†o ${DateUtils.getInstance().formatDate(deadlineDate)} ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.`
                result.response = true
                break
              }
              let newAssignment: Assignment
              try {
                newAssignment = await this.assignmentService.createAssignment({
                  title: assignmentDetails.name,
                  classSubjectId: classSubjectInfo.id,
                  deadline: deadlineDate,
                  description: assignmentDetails.description || "",
                })
                result.message = `ƒê√£ th√™m b√†i t·∫≠p: ${assignmentDetails.name} thu·ªôc m√¥n ${
                  classSubjectInfo?.subjectName
                } v·ªõi h·∫°n n·ªôp v√†o ${DateUtils.getInstance().formatDate(deadlineDate)}`
              } catch (error: any) {
                result.message = `L·ªói khi t·∫°o b√†i t·∫≠p: ${error.message as unknown as string}`
                result.response = true
                break
              }

              const users = await this.classService.getUsersRegisteredClass(classSubjectInfo.id)

              for (const user of users) {
                await this.assignmentService.assignAssignmentToUser(newAssignment.id, user, userId)
                result.message += `\nƒê√£ g√°n b√†i t·∫≠p cho ng∆∞·ªùi d√πng: ${user}`
              }
            }
          }
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.REMOVE_ASSIGNMENT):
          logger.info("Processing /remove_assignment command for user:", userId)
          result.response = true
          messageType = MessageType.TEMPLATE

          if (!checkUserRegistration.ok) {
            result.message = checkUserRegistration.message
            break
          }

          const assignmentIdToRemove: string = messageText.replace(Command.REMOVE_ASSIGNMENT, "").trim()
          logger.debug("Assignment ID to remove:", assignmentIdToRemove)
          if (!assignmentIdToRemove) {
            result.message = "C√∫ ph√°p x√≥a b√†i t·∫≠p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: /remove_assignment M√£ B√†i T·∫≠p"
          } else {
            const assignmentRecord = await this.assignmentService.getUserAssignmentById(assignmentIdToRemove, userId)
            if (!assignmentRecord) {
              result.message = `Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p v·ªõi m√£: ${assignmentIdToRemove}. Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p.`
            } else {
              await this.assignmentService.removeAssignmentFromUsers(assignmentRecord.id, userId)
              const assignment = await this.assignmentService.getAssignmentById(assignmentRecord.assignmentId)
              result.message = `ƒê√£ x√≥a b√†i t·∫≠p "${assignment?.name}" kh·ªèi danh s√°ch c·ªßa b·∫°n.`
            }
          }
          break
        case messageText.startsWith(Command.STATUS_ASSIGNMENT):
          logger.info("Processing /status_assignment command for user:", userId)
          result.response = true
          messageType = MessageType.TEMPLATE

          if (!checkUserRegistration.ok) {
            result.message = checkUserRegistration.message
            break
          }

          const statusDetails: any = messageText.replace(Command.STATUS_ASSIGNMENT, "").trim()
          const command = statusDetails.split("|").map((s: string) => s.trim())
          const assignmentId = command[0]
          const completed = command[1] === "true" ? true : command[1] === "false" ? false : null

          if (!assignmentId || typeof completed !== "boolean") {
            logger.error("Invalid /status_assignment command format:", statusDetails)
            result.message = "C√∫ ph√°p c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: /status_assignment M√£ B√†i T·∫≠p|completed(true/false)"
          } else {
            const assignmentRecord = await this.assignmentService.getUserAssignmentById(assignmentId, userId)
            if (!assignmentRecord) {
              result.message = `Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p v·ªõi m√£: ${assignmentId}. Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p.`
            } else {
              await this.assignmentService.updateUserAssignmentStatus(
                assignmentId,
                userId,
                completed ? AssignmentStatus.COMPLETED : AssignmentStatus.PENDING
              )
              const assignment = await this.assignmentService.getAssignmentById(assignmentRecord.assignmentId)
              const classSubject = await this.classService.getClassSubjectById(assignment?.classSubjectId || "")
              result.message = `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p "${assignment?.name}" m√¥n [${classSubject?.subjectName}] th√†nh ${
                completed ? "ho√†n th√†nh ‚úÖ" : "ch∆∞a ho√†n th√†nh ‚ùå"
              }.`
            }
          }

          break

        case messageText.startsWith(Command.NOTIFY):
          logger.info("Processing /notify command for user:", userId)
          let notifyStatus = messageText.replace(Command.NOTIFY, "").trim().toLowerCase()
          let notifyBoolean: boolean | null = null
          if (notifyStatus === "on") notifyBoolean = true
          else if (notifyStatus === "off") notifyBoolean = false

          if (notifyBoolean === null) {
            result.message = "C√∫ ph√°p b·∫≠t/t·∫Øt th√¥ng b√°o kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: /notify on ho·∫∑c /notify off"
          } else {
            await this.userService.toggleUserNotify(userId, notifyBoolean)
            result.message = `Ch√†o ${userName}, B·∫°n ƒë√£ ${notifyBoolean ? "b·∫≠t" : "t·∫Øt"} th√¥ng b√°o nh·∫Øc nh·ªü l·ªãch h·ªçc v√† b√†i t·∫≠p.`
            if (!notifyBoolean) {
              result.message += " B·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o nh·∫Øc nh·ªü v·ªÅ b√†i t·∫≠p n·ªØa ·∫°!."
            }
          }
          result.response = true
          messageType = MessageType.TEMPLATE
          break

        case messageText.startsWith(Command.DOCS):
          logger.info("Processing /docs command for user:", userId)
          const linkDocs = {
            IT003: "https://drive.google.com/drive/folders/1yq-UCLLKQ7sCprpgBAr0fyvTyHhAENzz",
            MA004: "https://drive.google.com/drive/folders/1ko2CZQ5Cim3bVmvxTaMp2ppQelyXYz7k?usp=sharing",
            IE105: "https://drive.google.com/drive/folders/19WuX5aageEQ_H_bEZaFIJI3fafV6F101?usp=sharing",
            MA005: "https://drive.google.com/drive/folders/1i3usHbgApzG3iT0Nzi8vV0mmfx_sFNU9?usp=sharing",
          }
          if (!checkUserRegistration.ok) {
            result.message = checkUserRegistration.message
            break
          }

          result.message = BOT_RESPONSES.docs.notFound

          const classCode = messageText.replace(Command.DOCS, "").trim().toUpperCase()
          if (classCode && classCode.startsWith("IT003")) {
            result.message = `üìö T√†i li·ªáu cho l·ªõp h·ªçc ${classCode}:\n${linkDocs.IT003}`
          }
          if (classCode && classCode.startsWith("MA004")) {
            result.message = `üìö T√†i li·ªáu cho l·ªõp h·ªçc ${classCode}:\n${linkDocs.MA004}`
          }
          if (classCode && classCode.startsWith("IE105")) {
            result.message = `üìö T√†i li·ªáu cho l·ªõp h·ªçc ${classCode}:\n${linkDocs.IE105}`
          }
          if (classCode && classCode.startsWith("MA005")) {
            result.message = `üìö T√†i li·ªáu cho l·ªõp h·ªçc ${classCode}:\n${linkDocs.MA005}`
          }
          if (!classCode || classCode === "") {
            result.message =
              "üìö Danh s√°ch t√†i li·ªáu l·ªõp h·ªçc:\n" +
              Object.entries(linkDocs)
                .map(([key, value]) => `- ${key}: ${value}`)
                .join("\n")
          }

          result.response = true
          messageType = MessageType.TEMPLATE
          break
        default:
          // Here you would implement command processing logic
          // For now, we just echo back the command
          result.message = `Ch√†o b·∫°n ${userName}, hi·ªán t·∫°i t√¥i ch·ªâ x·ª≠ l√Ω ƒë∆∞·ª£c tin nh·∫Øn theo c√∫ ph√°p ƒë√£ ƒë·ªãnh nghƒ©a. Vui l√≤ng th·ª≠ l·∫°i /help ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ·∫°! üòä`
          result.response = true
          break
      }

      // Save outgoing message
      await this.saveMessage({
        zaloId: userId,
        content: result.message,
        chatId: chatId,
        type: messageType,
        direction: MessageDirection.OUTGOING,
        timestamp: new Date(),
      })

      return result
    } catch (error) {
      console.error("Error processing command message:", error)
      throw error
    }
  }

  async handleMessageUserRegistration(zaloId: string): Promise<{
    ok: boolean
    message: string
  }> {
    try {
      const user = await this.userService.checkUserRegistration(zaloId)
      if (!user) {
        // Send welcome message
        const welcomeMessage = BOT_RESPONSES.unregister.notRegistered
        return {
          ok: false,
          message: welcomeMessage,
        }
      } else {
        return {
          ok: true,
          message: "",
        }
      }
    } catch (error) {
      console.error("Error handling user registration message:", error)
      throw error
    }
  }
}
